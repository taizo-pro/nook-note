name: Build and Release NookNote

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  APP_NAME: NookNote
  BUNDLE_ID: com.nooknote.app

jobs:
  build-and-release:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'
        
    - name: Setup Swift
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: '5.9'
        
    - name: Cache Swift dependencies
      uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('Package.swift') }}
        restore-keys: |
          ${{ runner.os }}-spm-
          
    - name: Install dependencies
      run: |
        # Install create-dmg for DMG creation
        brew install create-dmg
        
    - name: Set version from tag
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "VERSION_NUMBER=${VERSION#v}" >> $GITHUB_OUTPUT
        echo "Building version: ${VERSION}"
        
    - name: Update version in Info.plist
      run: |
        sed -i '' "s/<string>1.0.0<\/string>/<string>${{ steps.version.outputs.VERSION_NUMBER }}<\/string>/g" Sources/Info.plist
        cat Sources/Info.plist
        
    - name: Build Swift package
      run: |
        echo "🔨 Building NookNote..."
        swift build --configuration release --arch arm64 --arch x86_64
        
    - name: Create app bundle
      run: |
        echo "📦 Creating app bundle..."
        chmod +x Scripts/build-app.sh
        ./Scripts/build-app.sh
        
    - name: Sign app (Ad-hoc)
      run: |
        echo "✍️ Signing app..."
        chmod +x Scripts/sign-app.sh
        ./Scripts/sign-app.sh
        
    - name: Create DMG
      run: |
        echo "📀 Creating DMG..."
        chmod +x Scripts/create-dmg.sh
        ./Scripts/create-dmg.sh
        
    - name: Verify build artifacts
      run: |
        echo "🔍 Verifying build artifacts..."
        ls -la build/Release/
        
        # Check if app bundle exists
        if [ ! -d "build/Release/$APP_NAME.app" ]; then
          echo "❌ App bundle not found"
          exit 1
        fi
        
        # Check if DMG exists
        DMG_FILE="build/Release/$APP_NAME-${{ steps.version.outputs.VERSION_NUMBER }}.dmg"
        if [ ! -f "$DMG_FILE" ]; then
          echo "❌ DMG file not found: $DMG_FILE"
          exit 1
        fi
        
        echo "✅ Build artifacts verified"
        echo "App bundle: build/Release/$APP_NAME.app"
        echo "DMG file: $DMG_FILE"
        
    - name: Calculate checksums
      run: |
        echo "🔐 Calculating checksums..."
        cd build/Release
        DMG_FILE="$APP_NAME-${{ steps.version.outputs.VERSION_NUMBER }}.dmg"
        
        # Generate checksums
        shasum -a 256 "$DMG_FILE" > "$DMG_FILE.sha256"
        md5 "$DMG_FILE" > "$DMG_FILE.md5"
        
        echo "📋 Checksums:"
        cat "$DMG_FILE.sha256"
        cat "$DMG_FILE.md5"
        
    - name: Create release notes
      run: |
        cat > release-notes.md << 'EOF'
        # NookNote ${{ steps.version.outputs.VERSION }}
        
        A macOS menubar application for quick access to GitHub Discussions.
        
        ## Features
        - 🖥️ Native macOS menubar integration
        - 💬 Browse and search GitHub Discussions
        - ✍️ Create new discussions and comments
        - 🔍 Advanced filtering and search
        - 🔄 Real-time updates
        - 🔔 Native notifications
        - ⌨️ Keyboard shortcuts
        
        ## Installation
        1. Download the DMG file below
        2. Right-click and select "Open" (to bypass security warning)
        3. Drag NookNote to Applications folder
        4. Launch NookNote from Applications
        5. Right-click and select "Open" on first launch
        6. Configure your GitHub repository and Personal Access Token
        
        ## Security Note
        This app is self-signed and will show security warnings. This is normal for free distribution outside the Mac App Store.
        
        ## System Requirements
        - macOS 12.0 (Monterey) or later
        - GitHub Personal Access Token with appropriate permissions
        
        ## Checksums
        - SHA256: (see .sha256 file)
        - MD5: (see .md5 file)
        EOF
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: NookNote ${{ steps.version.outputs.VERSION }}
        body_path: release-notes.md
        draft: false
        prerelease: false
        files: |
          build/Release/${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION_NUMBER }}.dmg
          build/Release/${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION_NUMBER }}.dmg.sha256
          build/Release/${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION_NUMBER }}.dmg.md5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: nooknote-${{ steps.version.outputs.VERSION_NUMBER }}
        path: |
          build/Release/${{ env.APP_NAME }}.app
          build/Release/${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION_NUMBER }}.dmg
          build/Release/${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION_NUMBER }}.dmg.sha256
          build/Release/${{ env.APP_NAME }}-${{ steps.version.outputs.VERSION_NUMBER }}.dmg.md5
        retention-days: 30
        
    - name: Post-build summary
      run: |
        echo "🎉 Build and Release Complete!"
        echo ""
        echo "📦 Artifacts:"
        echo "- App: build/Release/$APP_NAME.app"
        echo "- DMG: build/Release/$APP_NAME-${{ steps.version.outputs.VERSION_NUMBER }}.dmg"
        echo "- Release: ${{ steps.version.outputs.VERSION }}"
        echo ""
        echo "🔗 Download: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.VERSION }}"