name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  APP_NAME: NookNote
  SWIFT_VERSION: 5.9

jobs:
  build-and-release:
    name: Build and Release NookNote
    runs-on: macos-14
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'
        
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-spm-release-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-release-
          ${{ runner.os }}-spm-
          
    - name: Build release binary
      run: |
        echo "🔨 Building release binary..."
        swift build --configuration release -Xswiftc -Osize
        
        # Verify build - check both possible locations
        if [ -f ".build/release/$APP_NAME" ]; then
          BUILD_PATH=".build/release/$APP_NAME"
        elif [ -f ".build/apple/Products/Release/$APP_NAME" ]; then
          BUILD_PATH=".build/apple/Products/Release/$APP_NAME"
        else
          echo "❌ Build failed - executable not found"
          ls -la .build/*/
          exit 1
        fi
        
        echo "BUILD_PATH=$BUILD_PATH" >> $GITHUB_ENV
        
        echo "✅ Build successful"
        
    - name: Create app bundle
      run: |
        echo "📦 Creating app bundle..."
        
        APP_BUNDLE="build/$APP_NAME.app"
        mkdir -p "$APP_BUNDLE/Contents/MacOS"
        mkdir -p "$APP_BUNDLE/Contents/Resources"
        
        # Copy executable
        cp "$BUILD_PATH" "$APP_BUNDLE/Contents/MacOS/"
        
        # Create Info.plist
        cat > "$APP_BUNDLE/Contents/Info.plist" << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>$APP_NAME</string>
            <key>CFBundleIdentifier</key>
            <string>com.nooknote.app</string>
            <key>CFBundleName</key>
            <string>$APP_NAME</string>
            <key>CFBundleDisplayName</key>
            <string>$APP_NAME</string>
            <key>CFBundleShortVersionString</key>
            <string>${{ steps.version.outputs.version }}</string>
            <key>CFBundleVersion</key>
            <string>1</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>NSPrincipalClass</key>
            <string>NSApplication</string>
            <key>NSHighResolutionCapable</key>
            <true/>
            <key>LSMinimumSystemVersion</key>
            <string>12.0</string>
            <key>LSUIElement</key>
            <true/>
            <key>NSHumanReadableCopyright</key>
            <string>Copyright © 2025 NookNote. All rights reserved.</string>
        </dict>
        </plist>
        EOF
        
        echo "✅ App bundle created"
        
    - name: Sign app bundle
      run: |
        echo "🔐 Signing app bundle..."
        codesign --force --deep --sign - "build/$APP_NAME.app"
        echo "✅ App bundle signed"
        
    - name: Create DMG
      run: |
        echo "💿 Creating DMG..."
        
        DMG_DIR="build/dmg"
        TEMP_DMG_DIR="$DMG_DIR/temp"
        
        # Create staging directory
        mkdir -p "$TEMP_DMG_DIR"
        cp -r "build/$APP_NAME.app" "$TEMP_DMG_DIR/"
        
        # Create Applications symlink
        ln -sf /Applications "$TEMP_DMG_DIR/Applications"
        
        # Create README
        cat > "$TEMP_DMG_DIR/README.txt" << EOF
        $APP_NAME ${{ steps.version.outputs.version }}
        
        Installation:
        1. Drag $APP_NAME.app to Applications folder
        2. Right-click and select "Open" (first time only)
        3. Configure GitHub repository and token
        
        Documentation: https://github.com/taizo-pro/nook-note
        EOF
        
        mkdir -p "$DMG_DIR"
        
        # Create DMG
        FINAL_DMG="$DMG_DIR/$APP_NAME-${{ steps.version.outputs.version }}.dmg"
        
        hdiutil create -volname "$APP_NAME ${{ steps.version.outputs.version }}" \
          -srcfolder "$TEMP_DMG_DIR" \
          -ov -format UDZO \
          "$FINAL_DMG"
        
        rm -rf "$TEMP_DMG_DIR"
        
        echo "DMG_PATH=$FINAL_DMG" >> $GITHUB_ENV
        echo "✅ DMG created: $FINAL_DMG"
        
    - name: Generate checksums
      run: |
        echo "🔐 Generating checksums..."
        cd "build/dmg"
        DMG_FILE="$APP_NAME-${{ steps.version.outputs.version }}.dmg"
        
        # Generate checksums
        shasum -a 256 "$DMG_FILE" > "$DMG_FILE.sha256"
        md5 "$DMG_FILE" > "$DMG_FILE.md5"
        
        echo "✅ Checksums generated"
        
    - name: Create release notes
      run: |
        cat > release_notes.md << EOF
        # $APP_NAME ${{ steps.version.outputs.version }}
        
        A modern macOS MenuBar application for GitHub Discussions.
        
        ## ✨ Features
        
        - 🚀 **MenuBar Integration** - Quick access from macOS MenuBar
        - 📝 **Discussion Management** - Create and comment on GitHub Discussions
        - 🔄 **Real-time Updates** - Auto-refresh with configurable intervals
        - 🔍 **Advanced Search** - Filter by category, state, and content
        - ⌨️ **Keyboard Shortcuts** - Complete keyboard navigation
        - 🎨 **Modern UI** - Native SwiftUI with smooth animations
        - 🔐 **Secure Authentication** - Safe token storage in Keychain
        - ♿ **Accessibility** - Full VoiceOver support
        
        ## 📥 Installation
        
        1. Download \`$APP_NAME-${{ steps.version.outputs.version }}.dmg\`
        2. Open DMG and drag app to Applications
        3. **Important**: Right-click app → "Open" (first time only)
        4. Configure GitHub repository and Personal Access Token
        
        ## 📋 Requirements
        
        - macOS 12.0+ (Monterey or later)
        - GitHub Personal Access Token with \`repo\`, \`read:discussion\`, \`write:discussion\` scopes
        
        ## 🔒 Security Note
        
        This app uses a self-signed certificate for free distribution. The security warning is expected - just right-click and select "Open".
        
        ## 📖 Documentation
        
        - [Installation Guide](https://github.com/taizo-pro/nook-note/blob/main/INSTALLATION.md)
        - [User Guide](https://github.com/taizo-pro/nook-note/blob/main/docs/USER_GUIDE.md)
        - [Contributing](https://github.com/taizo-pro/nook-note/blob/main/CONTRIBUTING.md)
        
        ## 🐛 Report Issues
        
        Found a bug? [Create an issue](https://github.com/taizo-pro/nook-note/issues/new/choose)
        
        ---
        
        🚀 **Generated with [Claude Code](https://claude.ai/code)**
        
        Co-Authored-By: Claude <noreply@anthropic.com>
        EOF
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: ${{ env.APP_NAME }} ${{ steps.version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: |
          build/dmg/${{ env.APP_NAME }}-${{ steps.version.outputs.version }}.dmg
          build/dmg/${{ env.APP_NAME }}-${{ steps.version.outputs.version }}.dmg.sha256
          build/dmg/${{ env.APP_NAME }}-${{ steps.version.outputs.version }}.dmg.md5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Notify success
      run: |
        echo "🎉 Release ${{ steps.version.outputs.version }} created successfully!"
        echo "📦 DMG and checksums uploaded to GitHub Releases"
        echo "🔗 https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}"